<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
	    http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd">

	
	<!-- validator, conversionService, messageConverter를 자동으로 등록 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<!-- HTML(text message converter -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
					</list>
				</property>
			</bean>
			
			<!-- XML message converter -->
			<!-- 
				1. Mashalling
					: 데이터(Object)를 xml 형태로 만드는 것
				2. Unmashilng
					: Xml으로 표현되어 있는 데이터를 특정 데이터 형테(자바에서는 OBject)로 만드는것
			 	
			 	3. 하는 방법
			 		1) OXM(Object Xmk Mapping)
			 			: XML 데이터와 객체를 맵핑
			 			: MarshllingHttpMessageConverter
			 		2) JAXB(Java Architecture for XML Binding) - 대부분 이런 형태로 많이 쓴다
			 			: OXM을 쉽게 도와주는 Tool
			 			: Marshalling과 Unmarshalling을 Annotation 기반으로 한다.
			 			: JAXBAnnotation(@XmlElementRoot)를 사용해서 직관적 맵핑이 가능하다
			 			: Jax2RootElementHttpMessageConverter -> @XmlElementRoot 어노테이션이 붙어있는것을 찾아서 처리
									 
			 -->
			 <bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/xml; charset=UTF-8</value>
					</list>
				</property>
			</bean>	
			 
			 
			 
			
			<!-- JSON message converter -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json; charset=UTF-8</value>
					</list>
				</property>
			</bean>			
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- ViewResolver 설정 : jsp 이름 설정 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver ">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
		
	<!-- 서블릿 컨테이너(tomcat)의 디폴트 서블릿 위임(Delegate) 핸들러 : css 가 깨지면 설정해보자 -->
	<mvc:default-servlet-handler />
	<!-- bean 설정을 어노테이션으로 할꺼라는 설정 -->
	<context:annotation-config />
	<!-- 컨테이너에게 알려줄 어노테이션으로 설정된 페키지의 위치와 클레스의 위치를 알려주는것 -->
	<context:component-scan
		base-package="com.douzone.ch08.controller" />

</beans>
